
  vec3 convert_R2_to_ball_model_R3(vec2 p){
  float denom = p.x*p.x + p.y*p.y + 1.0; //never zero
  return vec3(2.0*p.x/denom, 2.0*p.y/denom, (-1.0 + p.x*p.x + p.y*p.y)/denom);
  }

  float R13_dot(vec4 u, vec4 v){
    return -u.x*v.x + u.y*v.y + u.z*v.z + u.w*v.w; // Lorentz Dot
  }

  float R13_dist(vec4 u, vec4 v){
    float bUV = -R13_dot(u,v);
    if (bUV < 1.0) {return 0.0;}
    else {return acosh(bUV);}  
  } 

  float R13_norm_inv(vec4 v){
    return inversesqrt(abs(R13_dot(v,v)));
  }
  
  vec4 R13_normalise(vec4 u){
    return u*R13_norm_inv(u);
  }
  
  vec4 Klein_to_hyperboloid(vec3 v){
    // hyperboloid is: -w*w + x*x + y*y + z*z = -1
    // want (w, w*x, w*y, w*z) that satisfies the above
    // so w*w*(-1 + x*x + y*y + z*z) = -1
    // so w = sqrt(-1/(-1 + x*x + y*y + z*z))
    float s = 0.0;
    float temp = 1.0 / (1.0 - dot(v,v));
    if(temp >= 0.0){s = sqrt(temp);}
    return vec4(s, s*v);
  }

float param_to_isect_line_with_plane(vec4 line_start, vec4 line_dir, vec4 plane){
    float denom = R13_dot(plane, line_dir);
    if(denom == 0.0){ return 200000000.0; }  // bigger than the initial smallest_p value we will accept
    /// solve: R13_dot(plane, line_start + p * line_dir) = 0
    ///        R13_dot(plane, line_start) + p * R13_dot(plane, line_dir) = 0
    return (-R13_dot(plane, line_start)) / denom;
  }

// inf             1
//   v0 -------- v2
//    | `.    .' |
//    |   `. '   |
//    |   . `.   |
//    | .'    `. |
//   v3 -------- v1
// z               0


///// fig 8 sister

// vec4 planes[8] = vec4[8](
//     vec4(0.8660254037844389, 0.8660254037844389, 0.4999999999999998, -0.8660254037844389), 
//     vec4(0.8660254037844387, 0.8660254037844387, 0.5, 0.8660254037844387), 
//     vec4(0.0, -0.8660254037844387, 0.5000000000000001, -0.0), 
//     vec4(0.0, -0.0, -1.0, -0.0),
//     vec4(0.8660254037844389, 0.8660254037844389, 0.4999999999999998, -0.8660254037844389), 
//     vec4(0.8660254037844387, 0.8660254037844387, 0.5, 0.8660254037844387), 
//     vec4(0.0, -0.8660254037844387, 0.5000000000000001, -0.0), 
//     vec4(0.0, -0.0, -1.0, -0.0)  
//     );  /// planes are in 1,3 signature... so x,y,z,w means that x is the -1...

// int other_tet_nums[8] = int[8](1,1,1,1,0,0,0,0);
// int entering_face_nums[8] = int[8](1,2,0,3,2,0,1,3);
// float weights[8] = float[8](0.5, 0.0, 0.5, 0.0, -0.5, -0.5, 0.0, 0.0);
// mat4 SO13tsfms[8] = mat4[8](
//   mat4(2.5, -1.5000000000000002, -0.8660254037844385, 1.5, 1.5, -0.5000000000000001, -0.8660254037844385, 1.5, 0.8660254037844385, -0.8660254037844385, 0.5000000000000001, 0.8660254037844385, 1.5000000000000002, -1.5000000000000002, -0.8660254037844385, 0.5),
//   mat4(1.4999999999999998, -0.49999999999999994, -0.8660254037844385, -0.4999999999999998, -0.5000000000000002, 1.0, 3.885780586188048e-16, 0.5000000000000002, 0.8660254037844383, 3.885780586188048e-16, -1.0, -0.8660254037844383, -0.49999999999999983, 0.49999999999999994, 0.8660254037844385, -0.5000000000000002),
//   mat4(1.9999999999999996, 2.220446049250314e-16, -1.7320508075688767, 4.440892098500628e-16, 1.4999999999999993, 2.220446049250314e-16, -1.7320508075688767, -0.4999999999999998, 0.8660254037844387, 0.0, -1.0, 0.8660254037844387, -1.110223024625157e-16, -1.0, 0.0, -1.110223024625157e-16),
//   mat4(1.5, -1.0, 0.0, 0.5, 1.0, -1.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, -0.5, 1.0, 0.0, 0.5),
//   mat4(1.9999999999999996, -1.4999999999999993, -0.8660254037844388, 0.0, -2.2204460492503126e-16, 2.2204460492503126e-16, 1.1102230246251563e-16, -1.0, 1.7320508075688767, -1.7320508075688767, -1.0, -1.1102230246251563e-16, -4.440892098500625e-16, -0.4999999999999999, 0.8660254037844388, 0.0),
//   mat4(2.5000000000000004, -1.5, -0.8660254037844389, -1.5000000000000007, 1.5000000000000007, -0.5000000000000001, -0.8660254037844388, -1.5000000000000007, 0.8660254037844388, -0.8660254037844388, 0.5000000000000001, -0.8660254037844388, -1.5000000000000002, 1.5, 0.8660254037844389, 0.5000000000000003),
//   mat4(1.4999999999999998, 0.5000000000000002, -0.8660254037844383, 0.5000000000000001, 0.5000000000000001, 1.0, 2.7755575615628914e-16, 0.5000000000000001, 0.8660254037844386, 2.7755575615628914e-16, -1.0, 0.8660254037844386, 0.49999999999999967, 0.5000000000000002, -0.8660254037844383, -0.5000000000000001),
//   mat4(1.5, -1.0, 0.0, 0.5, 1.0, -1.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, -0.5, 1.0, 0.0, 0.5)
//   );  /// matrices are in 1,3 signature...

///// end of fig 8 sister

///// s227

vec4 planes[24] = vec4[24](
    vec4(0.7383656116386587, 0.7383656116386587, 0.674400640235068, -0.7383656116386587),
    vec4(0.9969719155509618, 0.9969719155509618, 0.07776245625394156, 0.9969719155509618),
    vec4(0.0, -0.7297756217184164, 0.6836867279284414, -0.0),
    vec4(0.0, -0.0, -1.0, -0.0),
    vec4(0.6049170246984955, 0.6049170246984955, 0.7962885113009731, -0.6049170246984955),
    vec4(0.3261397202094902, 0.3261397202094902, 0.9453215764498742, 0.3261397202094902),
    vec4(0.0, -0.8315424276910801, -0.5554612416268349, -0.0),
    vec4(0.0, -0.0, -1.0, -0.0),
    vec4(0.7297756217184167, 0.7297756217184167, 0.6836867279284412, -0.7297756217184167),
    vec4(0.7383656116386592, 0.7383656116386592, 0.6744006402350672, 0.7383656116386592),
    vec4(0.0, -0.9969719155509617, 0.07776245625394282, -0.0),
    vec4(0.0, -0.0, -1.0, -0.0),
    vec4(0.7297756217184161, 0.7297756217184161, 0.683686727928442, -0.7297756217184161),
    vec4(0.7383656116386591, 0.7383656116386591, 0.6744006402350675, 0.7383656116386591),
    vec4(0.0, -0.9969719155509617, 0.07776245625394149, -0.0),
    vec4(0.0, -0.0, -1.0, -0.0),
    vec4(0.6049170246984956, 0.6049170246984956, -0.796288511300973, -0.6049170246984956),
    vec4(0.4536014249635069, 0.4536014249635069, 0.8912046607099158, 0.4536014249635069),
    vec4(0.0, -0.17790726834588336, 0.9840472569291101, -0.0),
    vec4(0.0, -0.0, -1.0, -0.0),
    vec4(0.6049170246984954, 0.6049170246984954, 0.796288511300973, -0.6049170246984954),
    vec4(0.32613972020949017, 0.32613972020949017, 0.9453215764498742, 0.32613972020949017),
    vec4(0.0, -0.8315424276910799, -0.5554612416268346, -0.0),
    vec4(0.0, -0.0, -1.0, -0.0)
  );

int other_tet_nums[24] = int[24](1, 2, 1, 3, 0, 4, 4, 0, 0, 2, 2, 3, 5, 5, 2, 0, 5, 1, 5, 1, 3, 4, 4, 3);
int entering_face_nums[24] = int[24](3, 0, 0, 3, 2, 1, 3, 0, 1, 2, 1, 2, 3, 0, 3, 3, 2, 1, 1, 2, 1, 2, 0, 0);
float weights[24] = float[24](0.16666666666666666, 0.0, 0.0, 0.0, 0.0, 0.16666666666666666, 0.0, -0.16666666666666666, 0.0, 0.3333333333333333, -0.3333333333333333, 0.0, 0.0, -0.16666666666666666, 0.0, 0.0, 0.16666666666666666, -0.16666666666666666, 0.0, 0.0, 0.16666666666666666, 0.0, -0.16666666666666666, 0.0);
mat4 SO13tsfms[24] = mat4[24](
  mat4(1.4237263738249992, -0.6917342180428407, -0.7383656116386588, 0.05759151554709072, 0.057591515547090834, 0.6744006402350677, -0.7383656116386588, 0.057591515547090834, -0.7383656116386588, 0.7383656116386588, 0.6744006402350677, -0.7383656116386588, -0.6917342180428407, 0.6917342180428407, 0.7383656116386588, 0.6744006402350677), 
  mat4(2.772527654295136, -2.0405354985129764, -0.7383656116386587, -1.406392796017228, 1.4063927960172278, -0.6744006402350684, -0.7383656116386585, -1.4063927960172278, 0.7383656116386585, -0.7383656116386585, 0.6744006402350684, -0.7383656116386585, -2.040535498512977, 2.0405354985129764, 0.7383656116386587, 0.6744006402350686), 
  mat4(2.119865652572644, -0.7572968893475922, -1.6931348608374852, -0.23157320518257543, -0.5456028341678731, 0.9858655845657712, 0.16753820211757736, 0.5456028341678731, 0.8167840909121119, 0.16753820211757736, -0.9858655845657712, -0.8167840909121119, -1.5902866663397832, 0.7572968893475922, 1.6931348608374852, -0.2980057810502854), 
  mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, -1.0), 
  mat4(2.1198656525726434, 0.5456028341678733, -0.8167840909121116, 1.5902866663397823, 0.7572968893475919, 0.985865584565771, 0.16753820211757742, 0.7572968893475919, 1.6931348608374848, 0.16753820211757742, -0.985865584565771, 1.6931348608374848, 0.2315732051825754, 0.5456028341678733, -0.8167840909121116, -0.29800578105028536), 
  mat4(3.100232411734826, 1.5737892593439182, -2.3560105427988978, 0.764095999312455, 2.8862838957945467, 1.7877377752841972, -2.3560105427988973, 0.7640959993124552, 0.5218152684800519, -0.5218152684800518, -0.9904124366259975, 0.13814197543308632, -0.09227732781826467, 0.09227732781826489, -0.13814197543308632, -0.9904124366259975), 
  mat4(2.124352687225018, 0.5554612416268347, -0.8315424276910799, 1.585204825793864, 1.854778756509441, 0.5554612416268347, -0.8315424276910799, 1.854778756509441, 0.0, -0.8315424276910799, -0.5554612416268347, 0.0, 0.2695739307155769, 0.5554612416268347, -0.8315424276910799, -0.2695739307155769), 
  mat4(1.4237263738249994, -0.05759151554709078, 0.7383656116386588, 0.691734218042841, 0.691734218042841, 0.6744006402350677, 0.7383656116386588, 0.691734218042841, 0.7383656116386589, -0.7383656116386588, 0.6744006402350677, 0.7383656116386589, -0.05759151554709078, 0.05759151554709078, -0.7383656116386588, 0.6744006402350677), 
  mat4(2.7725276542951343, -1.4063927960172267, -0.7383656116386583, 2.0405354985129756, 2.0405354985129756, -0.6744006402350678, -0.7383656116386583, 2.0405354985129756, 0.7383656116386583, -0.7383656116386583, 0.6744006402350678, 0.7383656116386583, 1.4063927960172267, -1.4063927960172267, -0.7383656116386583, 0.674400640235068), 
  mat4(1.4231499042685463, -0.05692150799223933, -0.7297756217184169, -0.6996735909643581, -0.6823388263424399, 0.788572828496262, 0.614941374569483, 0.6823388263424399, 0.7470567119887846, 0.614941374569483, -0.788572828496262, -0.7470567119887846, -0.04093464495632265, 0.05692150799223933, 0.7297756217184169, -0.6825416683478656), 
  mat4(1.423149904268546, 0.6823388263424397, -0.7470567119887845, 0.040934644956322375, 0.056921507992239384, 0.788572828496262, 0.614941374569483, 0.056921507992239384, 0.7297756217184167, 0.614941374569483, -0.788572828496262, 0.7297756217184167, 0.6996735909643579, 0.6823388263424397, -0.7470567119887845, -0.6825416683478658), 
  mat4(1.5059538327905708, -1.011770727418951, 0.0, 0.49418310537161986, 0.07776245625394156, -0.07776245625394156, -0.9969719155509618, 0.07776245625394156, 0.9969719155509618, -0.9969719155509618, 0.07776245625394156, 0.9969719155509618, 0.517587622047331, -1.011770727418951, 0.0, -0.49418310537161997), 
  mat4(1.4726505105331138, -0.7975297439129185, -0.729775621718416, -0.008565961308246606, 0.7975297439129185, -0.7975297439129185, -0.729775621718416, -0.6836867279284418, -0.729775621718416, 0.729775621718416, 0.6836867279284418, -0.729775621718416, -0.008565961308246661, 0.6836867279284418, -0.729775621718416, -0.008565961308246661), 
  mat4(2.31176941422755, -1.7759568981009382, -0.9959084824333374, -0.44544496322554905, 0.44544496322554916, 0.09036755290106264, -0.9959084824333373, -0.44544496322554916, 0.9959084824333373, -0.9959084824333373, -0.09036755290106264, -0.9959084824333373, -1.775956898100938, 1.7759568981009382, 0.9959084824333374, -0.09036755290106276), 
  mat4(1.5059538327905708, -0.07776245625394151, -0.9969719155509615, -0.517587622047331, 1.011770727418951, -0.07776245625394151, -0.9969719155509615, -1.011770727418951, 0.0, -0.9969719155509615, 0.07776245625394151, 0.0, -0.49418310537161986, 0.07776245625394151, 0.9969719155509615, -0.49418310537161986), 
  mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, -1.0), 
  mat4(2.273417720594019, -1.8039560723501074, -0.3261397202094902, 0.8987788961940287, -1.1631793404059578, 0.9453215764498745, -0.3261397202094903, -1.1631793404059578, 0.6522794404189807, -0.3261397202094903, -0.9453215764498745, 0.6522794404189807, 1.5459539081002283, -1.8039560723501074, -0.3261397202094902, 0.17131508370023762), 
  mat4(3.1002324117348268, -2.8862838957945476, -0.5218152684800519, 0.09227732781826514, -1.5737892593439187, 1.7877377752841974, -0.5218152684800519, 0.09227732781826492, 2.356010542798898, -2.3560105427988987, -0.990412436625997, -0.13814197543308593, -0.7640959993124564, 0.7640959993124563, 0.1381419754330862, -0.9904124366259971), 
  mat4(1.4620943496157175, -0.8722184774998395, -0.48911647642239753, 0.3711063017225777, 0.54549402394657, -0.8722184774998395, -0.48911647642239753, -0.54549402394657, 0.0, 0.48911647642239753, -0.8722184774998395, 0.0, 0.9166003256691477, -0.8722184774998395, -0.48911647642239753, 0.9166003256691477), 
  mat4(2.124352687225018, -1.854778756509441, 0.0, -0.26957393071557695, -0.5554612416268346, 0.5554612416268346, -0.83154242769108, 0.5554612416268346, 0.83154242769108, -0.83154242769108, -0.5554612416268346, -0.83154242769108, -1.585204825793864, 1.854778756509441, 0.0, -0.26957393071557684), 
  mat4(2.31176941422755, -0.4454449632255493, -0.9959084824333375, 1.7759568981009384, 1.7759568981009386, 0.09036755290106255, -0.9959084824333375, 1.7759568981009386, 0.9959084824333375, -0.9959084824333375, -0.09036755290106255, 0.9959084824333375, 0.4454449632255492, -0.4454449632255493, -0.9959084824333375, -0.09036755290106266), 
  mat4(1.4620943496157177, -0.5454940239465701, 0.0, -0.9166003256691476, 0.8722184774998396, -0.8722184774998396, 0.4891164764223976, -0.8722184774998396, 0.4891164764223976, -0.4891164764223976, -0.8722184774998396, -0.4891164764223976, -0.3711063017225776, -0.5454940239465701, 0.0, 0.9166003256691477), 
  mat4(2.2734177205940194, 1.163179340405958, -0.6522794404189806, -1.545953908100228, 1.8039560723501067, 0.945321576449874, -0.3261397202094902, -1.8039560723501067, 0.3261397202094899, -0.3261397202094902, -0.945321576449874, -0.3261397202094899, -0.8987788961940293, -1.163179340405958, 0.6522794404189806, 0.171315083700238), 
  mat4(1.4726505105331136, -0.7975297439129184, 0.7297756217184161, 0.008565961308246604, 0.7975297439129184, -0.7975297439129184, 0.7297756217184161, 0.6836867279284419, 0.7297756217184161, -0.7297756217184161, 0.6836867279284419, -0.7297756217184161, 0.008565961308246604, -0.6836867279284419, -0.7297756217184161, -0.008565961308246604)
  );
///// end of s227

vec4 get_ray_dir(vec2 resolution, vec2 fragCoord){ 
    vec2 xy = 0.2*((fragCoord - 0.5*resolution)/resolution.x);
    float z = 0.1/tan(radians(fov*0.5));
    vec4 p =  R13_normalise(vec4(xy,-z,0.0));
    return p;
}

vec4 ray_trace_through_hyperboloid_tet(vec4 init_pos, vec4 init_dir, int tet_num, int entry_face, out int exit_face){
    ///Given shape of a tet and a ray, find where the ray exits and through which face
    float smallest_p = 100000000.0;
    exit_face = 1000;
    for(int face=0; face<4; face++){
        if(face != entry_face){  // find p when we hit that face
            int index = 4*tet_num + face;
            if(R13_dot(init_dir, planes[index]) > 0.0){ 
                float p = param_to_isect_line_with_plane(init_pos, init_dir, planes[index]);
                if ((-0.00000001 <= p) && (p < smallest_p)) {
                    /// if we are on an edge then we don't in fact move as we go through this tet: t = 0.0
                    /// also allow tiny negative values, which will come up from floating point errors. 
                    /// surface normals check should ensure that even in this case we make progress through 
                    /// the triangles around an edge
                    smallest_p = p;
                    exit_face = face;
                }
            }
        }
    }
    return R13_normalise( init_pos + smallest_p * init_dir );
}

float ray_trace(vec4 init_pt, vec4 init_dir, float dist_to_go){
    // float dist_to_go = R13_dist(start_pt, pixel_pt);
    // vec4 diff = pixel_pt - start_pt;
    // vec4 init_dir = R13_normalise( (diff) + R13_dot(diff, start_pt) * start_pt );  // orthonormal decomp
    // vec4 init_pt = start_pt;
    int entry_face = -1;   /// starts off with no entry face
    int tet_num = 0;
    float total_face_weight = 0.0;
    int exit_face = 0;
    vec4 new_pt;
    float dist_moved;
    int index;
    mat4 tsfm;
    vec4 new_dir;
    for(int i=0; i<100; i++){
      new_pt = ray_trace_through_hyperboloid_tet(init_pt, init_dir, tet_num, entry_face, exit_face);
      dist_moved = R13_dist(init_pt, new_pt);
      dist_to_go -= dist_moved;
      if (dist_to_go <= 0.0){ break; }
      index = 4*tet_num + exit_face;
      total_face_weight += weights[ index ];
      entry_face = entering_face_nums[ index ];
      tsfm = SO13tsfms[ index ];
      tet_num = other_tet_nums[ index ];

      new_dir = init_dir + R13_dot(init_dir, new_pt) * new_pt; // orthonormal decomp, no normalisation yet
      init_pt = new_pt * tsfm;  
      init_dir = R13_normalise( new_dir * tsfm ); 
    }
    return total_face_weight;
}

vec3 mymix(vec3 col0, vec3 col1, float t){
  return (1.0-t)*col0 + t*col1;
}

float cool_threshholds[5] = float[5](0.0, 0.25, 0.45, 0.75, 1.000001);
vec3 cool_colours[5] = vec3[5](vec3(1.0, 1.0, 1.0), vec3(0.86274, 0.92941, 0.78431), vec3(0.25882, 0.70196, 0.83529), vec3(0.10196, 0.13725, 0.49412), vec3(0.0, 0.0, 0.0));

int find_band(float t, float threshholds[5]){
    for(int j=1;j<4;j++){
        if(t < threshholds[j]){return j;}
    }
    return 4;
}

vec4 general_gradient(float t, float threshholds[5], vec3 colours[5]){
    int i = find_band(t, threshholds);
    return vec4( mix(colours[i-1], colours[i],(t - threshholds[i-1])/(threshholds[i] - threshholds[i-1]) ), 1.0);
}

#define PI 3.1415926535897932384626433832795;

void main(){
  // vec2 p = vec2(2.0*gl_FragCoord.x/screenResolution.x - 1.0, (2.0*gl_FragCoord.y - screenResolution.y)/screenResolution.x);
  /// square aspect ratio, [-1,1] x [-h,h]
  // p = 0.03*p; // + vec2(0.3,0.0);
  // vec4 pt = Klein_to_hyperboloid( 0.999999 * convert_R2_to_ball_model_R3(p) );
  // vec4 start_pt = vec4(1.1094003924504583, 0.41602514716892186, 0.24019223070763074, 0.0);
  // float weight = ray_trace_to_a_point(pt, start_pt);
  vec4 init_pt = vec4(0.0,0.0,0.0,1.0);
  vec4 init_dir = get_ray_dir(screenResolution.xy, gl_FragCoord.xy);
  
  init_pt *= currentBoost;
  init_dir *= currentBoost; 
  /// and now, our own bigendian/littleendian horror
  init_pt = vec4(init_pt.w, init_pt.xyz);
  init_dir = vec4(init_dir.w, init_dir.xyz);

  float weight = ray_trace(init_pt, init_dir, 7.5);
  weight = 0.3 * weight;
  weight = 0.5 + 0.5*weight/(abs(weight) + 1.0);  //faster than atan, similar
  // weight = 0.5 + atan(0.3 * weight)/PI;  // between 0.0 and 1.0
  out_FragColor = general_gradient(weight, cool_threshholds, cool_colours);
  // out_FragColor = vec4(gl_FragCoord.x/screenResolution.x,0.0,0.0,1.0);
  // out_FragColor = general_gradient(gl_FragCoord.x/screenResolution.x, cool_threshholds, cool_colours);
}
